name: Throne build matrix
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release Tag and version (ignored; auto-generated)"
        required: false
        default: ""
      publish:
        description: "Ignored; always prerelease with auto tag"
        required: false
        default: ""

jobs:
  # ============================== Go (core) —— 保留 Windows/amd64 工件，供 C++ 阶段使用
  build-go:
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - cross_os: windows
            cross_arch: amd64
            go_version: "1.25.0"
    runs-on: ubuntu-latest
    steps:
      - name: Checking out sources
        uses: actions/checkout@v4.2.2

      - name: Cache Common Download
        id: cache-common
        uses: actions/cache@v4.2.3
        with:
          path: artifacts.tgz
          key: CommonCache-${{ matrix.cross_os }}-${{ matrix.cross_arch }}-${{ hashFiles('script/build_go.sh', 'core/*') }}-${{ matrix.go_version }}

      - name: Install Golang
        if: steps.cache-common.outputs.cache-hit != 'true'
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ matrix.go_version }}
          cache-dependency-path: |
            core/server/go.sum
            core/updater/go.sum

      # 与原文件一致（当前矩阵不会命中）
      - name: Install Golang For Legacy Windows
        if: matrix.cross_os == 'windowslegacy'
        run: |
          curl -L -o go.7z https://github.com/throneproj/env_windows_legacy/releases/download/latest/go.7z
          7z x go.7z

      - name: Install Protoc
        if: steps.cache-common.outputs.cache-hit != 'true'
        run: |
          curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v31.1/protoc-31.1-linux-x86_64.zip"
          unzip "protoc-31.1-linux-x86_64.zip" -d protoc_install
          cp ./protoc_install/bin/protoc /usr/local/bin
          protoc --version

      - name: Installing protoc-gen-go
        if: steps.cache-common.outputs.cache-hit != 'true'
        run: |
          go install github.com/golang/protobuf/protoc-gen-go@latest
          go install github.com/chai2010/protorpc/protoc-gen-protorpc@latest

      - name: Build golang parts
        if: steps.cache-common.outputs.cache-hit != 'true'
        shell: bash
        run: |
          GOOS=${{ matrix.cross_os }} GOARCH=${{ matrix.cross_arch }} ./script/build_go.sh

      - name: Tar files
        if: steps.cache-common.outputs.cache-hit != 'true'
        run: tar czvf artifacts.tgz ./deployment

      - name: Uploading Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Throne-${{ github.sha }}-Common-${{ matrix.cross_os }}-${{ matrix.cross_arch }}
          path: artifacts.tgz

  # ============================== C++ (Qt) —— 仅 Windows x86_64 + Qt 6.9.0
  build-cpp:
    permissions:
      contents: read
    needs:
      - build-go
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-latest
            qt_version: "6.9.0"
            target: x86_64
    runs-on: ${{ matrix.platform }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      INPUT_VERSION: ${{ github.event.inputs.tag }}   # 不再依赖，稍后在 publish 中覆盖
    steps:
      - name: Checking out sources
        uses: actions/checkout@v4.2.2
        with:
          submodules: "recursive"

      - name: Install mingw
        uses: bwoodsend/setup-winlibs-action@v1.15
        with:
          architecture: ${{ matrix.target }}

      - name: Download Artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          path: download-artifact

      - name: Qt static Cache
        id: cache-static-Qt
        uses: actions/cache@v4.2.3
        with:
          path: qt6/build
          key: QtStaticCache-${{ matrix.platform }}-${{ matrix.target }}-Qt${{ matrix.qt_version }}

      - name: Install Qt Windows
        shell: powershell
        if: steps.cache-static-Qt.outputs.cache-hit != 'true'
        run: ./script/build_qt_static_windows.bat ${{ matrix.qt_version }}

      - name: Windows - Generate MakeFile and Build
        shell: bash
        run: |
          export CMAKE_PREFIX_PATH=$PWD/qt6/build/lib/cmake
          mkdir -p build
          cd build
          cmake -GNinja -DCMAKE_CXX_FLAGS="-static" -DCMAKE_BUILD_TYPE=Debug ..
          ninja -j2
          cd ..
          ./script/deploy_windows.sh

      - name: Build Installer with NSIS
        shell: cmd
        run: |
          cp .\script\windows_installer.nsi .
          makensis windows_installer.nsi
          cp ThroneSetup.exe deployment/

      - name: Tar files
        shell: bash
        run: tar czvf artifacts.tgz ./deployment

      - name: Uploading Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Throne-${{ github.sha }}-${{ matrix.platform }}-${{ matrix.target }}-Qt${{ matrix.qt_version }}
          path: artifacts.tgz

  # ============================== 发布 —— 自动生成 LOVEGOD-XXX 并发 Pre-release
  publish:
    name: Pack & Publish Release
    runs-on: ubuntu-latest
    needs:
      - build-cpp
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checking out sources
        uses: actions/checkout@v4.2.2

      - name: Download Artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          path: download-artifact

      # 生成随机版本号：LOVEGOD-XXXXXX（6位大写HEX），并写入环境变量
      - name: Generate prerelease tag
        run: |
          TAG="LOVEGOD-$(openssl rand -hex 3 | tr '[:lower:]' '[:upper:]')"
          echo "TAG_NAME=$TAG" >> $GITHUB_ENV
          echo "INPUT_VERSION=$TAG" >> $GITHUB_ENV   # 供 env_deploy.sh 使用

      - name: Pack (Windows x64 only)
        run: |
          curl -Lo - https://github.com/tcnksm/ghr/releases/download/v0.17.0/ghr_v0.17.0_linux_amd64.tar.gz | tar xzv
          mv ghr*linux_amd64/ghr .
          source script/env_deploy.sh
          find . -name artifacts.tgz | xargs -n1 tar xvzf
          cd deployment
          rm -rf *.pdb win*/*.pdb

          mv ThroneSetup.exe $version_standalone-windows64-installer.exe
          mv windows64 Throne
          zip -9 -r $version_standalone-windows64.zip Throne
          rm -rf Throne

      # 创建并推送轻量标签，确保发布指向该 tag
      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f "$TAG_NAME"
          git push -f origin "$TAG_NAME"

      - name: Uploading Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Deployment-${{ github.sha }}
          path: deployment

      # 固定走 PreRelease，使用我们生成的 TAG_NAME
      - name: PreRelease
        run: |
          ./ghr -prerelease -delete -t "${{ github.token }}" -n "$TAG_NAME" "$TAG_NAME" deployment



